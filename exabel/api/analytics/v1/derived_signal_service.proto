// Copyright (c) 2022 Exabel AS. All rights reserved.

syntax = "proto3";

package exabel.api.analytics.v1;

import "exabel/api/analytics/v1/derived_signal_messages.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "protoc_gen_openapiv2/options/annotations.proto";

option go_package = "exabel.com/api/analytics/v1";
option java_multiple_files = true;
option java_outer_classname = "DerivedSignalServiceProto";
option java_package = "com.exabel.api.analytics.v1";

// Service to manage derived signals.
//
// A derived signal is a DSL expression with a unique label. The label must be unique to the
// customer.
//
// Derived signals are stored in Library folders and shared across users through folder sharing.
//
// Requests to the DerivedSignalService are executed in the context of the customer's service
// account (SA). The SA is a special user that is a member of the customer user group, giving
// it access to all folders that are shared with this user group, but not to private folders.
// Hence, only derived signals that are in folders shared to the SA, via the customer user group,
// will be accessible via the DerivedSignalService.
service DerivedSignalService {
  // Gets a derived signal.
  //
  // The derived signal must be in a folder that is shared to your service account (which is always
  // in your main customer user group).
  rpc GetDerivedSignal(GetDerivedSignalRequest) returns (DerivedSignal) {
    option (google.api.http) = {get: "/v1/{name=derivedSignals/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Get derived signal"};
  }
  // Creates a derived signal.
  rpc CreateDerivedSignal(CreateDerivedSignalRequest) returns (DerivedSignal) {
    option (google.api.http) = {
      post: "/v1/derivedSignals"
      body: "signal"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Create derived signal"};
  }
  // Updates a derived signal.
  //
  // Note that this method will update all fields unless `update_mask` is set.
  rpc UpdateDerivedSignal(UpdateDerivedSignalRequest) returns (DerivedSignal) {
    option (google.api.http) = {
      patch: "/v1/{signal.name=derivedSignals/*}"
      body: "signal"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Update derived signal"};
  }
  // Deletes a derived signal.
  rpc DeleteDerivedSignal(DeleteDerivedSignalRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=derivedSignals/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Delete derived signal"};
  }
}

// Request to GetDerivedSignal.
message GetDerivedSignalRequest {
  // The derived signal resource name.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "derivedSignalName"}
    }
  ];
}

// Request to CreateDerivedSignal.
message CreateDerivedSignalRequest {
  // A derived signal.
  DerivedSignal signal = 1 [(google.api.field_behavior) = REQUIRED];
  // Resource name of the Library folder to create the signal in, e.g. `folders/123`. If not
  // specified, the signal will be created in an “Analytics API” folder that is shared with the
  // customer user group.
  string folder = 2;
}

// Request to UpdateDerivedSignal.
message UpdateDerivedSignalRequest {
  // A derived signal.
  DerivedSignal signal = 1 [(google.api.field_behavior) = REQUIRED];
  // Use this to update only selected fields. For example, specify `expression` to update only
  // the expression.
  //
  // For REST requests, this is a comma-separated string.
  google.protobuf.FieldMask update_mask = 2;
}

// Request to DeleteDerivedSignal.
message DeleteDerivedSignalRequest {
  // The derived signal resource name.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "derivedSignalName"}
    }
  ];
}
