// Copyright (c) 2019-2022 Exabel AS. All rights reserved.

syntax = "proto3";

package exabel.api.data.v1;

option go_package = "exabel.com/api/data/v1";
option java_multiple_files = true;
option java_outer_classname = "RelationshipServiceProto";
option java_package = "com.exabel.api.data.v1";

import "exabel/api/data/v1/relationship_messages.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "protoc_gen_openapiv2/options/annotations.proto";

// Manages relationship types and relationships in the Data API.
service RelationshipService {
  // List all relationship types from a common catalog.
  rpc ListRelationshipTypes(ListRelationshipTypesRequest) returns (ListRelationshipTypesResponse) {
    option (google.api.http) = {
      get: "/v1/relationshipTypes"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List relationship types"
    };
  }
  // Gets one relationship type.
  rpc GetRelationshipType(GetRelationshipTypeRequest) returns (RelationshipType) {
    option (google.api.http) = {
      get: "/v1/{name=relationshipTypes/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get relationship type"
    };
  }
  // Creates one relationship type and returns it.
  rpc CreateRelationshipType(CreateRelationshipTypeRequest) returns (RelationshipType) {
    option (google.api.http) = {
      post: "/v1/relationshipTypes"
      body: "relationship_type"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create relationship type"
    };
  }
  // Updates one relationship type and returns it.
  rpc UpdateRelationshipType(UpdateRelationshipTypeRequest) returns (RelationshipType) {
    option (google.api.http) = {
      patch: "/v1/{relationship_type.name=relationshipTypes/*}"
      body: "relationship_type"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update relationship type"
    };
  }
  // Deletes one relationship type. A relationship type cannot be deleted if
  // there exist relationships having that type.
  rpc DeleteRelationshipType(DeleteRelationshipTypeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=relationshipTypes/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete relationship type"
    };
  }
  // Lists relationship for a given entity.
  rpc ListRelationships(ListRelationshipsRequest) returns (ListRelationshipsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=relationshipTypes/*}/relationships"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List relationships"
    };
  }
  // Gets one relationship.
  rpc GetRelationship(GetRelationshipRequest) returns (Relationship) {
    option (google.api.http) = {
      get: "/v1/{parent=relationshipTypes/*}/relationships/{from_entity=entityTypes/*}/{to_entity=entityTypes/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get relationship"
    };
  }
  // Creates one relationship and returns it.
  rpc CreateRelationship(CreateRelationshipRequest) returns (Relationship) {
    option (google.api.http) = {
      post: "/v1/{relationship.parent=relationshipTypes/*}/relationships"
      body: "relationship"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create relationship"
    };
  }
  // Updates one relationship and returns it.
  rpc UpdateRelationship(UpdateRelationshipRequest) returns (Relationship) {
    option (google.api.http) = {
      patch: "/v1/{relationship.parent=relationshipTypes/*}/relationships"
      body: "relationship"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update relationship"
    };
  }
  // Deletes one relationship.
  rpc DeleteRelationship(DeleteRelationshipRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{parent=relationshipTypes/*}/relationships"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete relationship"
    };
  }
}

// The request to list relationship types.
message ListRelationshipTypesRequest {
  // The maximum number of results to return. Defaults to 1000, which is also the maximum value
  // of this field.
  int32 page_size = 1;
  // The page token to resume the results from, as returned from a previous request to this method
  // with the same query parameters.
  string page_token = 2;
}

// The response to list relationship types. Returns all known relationship types.
message ListRelationshipTypesResponse {
  // The resulting relationship types.
  repeated RelationshipType relationship_types = 1;
  // The page token where the list continues. Can be sent to a subsequent query.
  string next_page_token = 2;
  // The total number of results, irrespective of paging.
  int32 total_size = 3;
}

// The request to create one relationship type.
message CreateRelationshipTypeRequest {
  // The relationship type to create.
  RelationshipType relationship_type = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request to update one relationship type.
message UpdateRelationshipTypeRequest {
  // The relationship type to update.
  RelationshipType relationship_type = 1 [(google.api.field_behavior) = REQUIRED];
  // The update mask to apply to the resource. Only the fields mentioned in this mask will be
  // modified. If "allow_missing" is set, this field is ignored.
  google.protobuf.FieldMask update_mask = 2;
  // If set to true, and the resource is not found, a new resource will be created.
  // If this is set, "update_mask" is ignored.
  bool allow_missing = 3;
}

// The request to delete one relationship type.
message DeleteRelationshipTypeRequest {
  // The resource name of the relationship type to delete, for example "relationshipTypes/ns.type1".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "relationshipTypeName"
      }
    }
  ];
}

// The response to get one relationship type.
message GetRelationshipTypeRequest {
  // The resource name of the requested relationship type, for example "relationshipTypes/ns.type1".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "relationshipTypeName"
      }
    }
  ];
}

// The request to list relationship for a given entity. At least one of from_entity and to_entity must be provided.
message ListRelationshipsRequest {
  // The type of the relationship, for example "relationshipTypes/ns.type1".
  // Use parent 'relationshipTypes/-' to include all types.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "relationshipTypeName"
      }
    }
  ];
  // The resource name of the start point of the relationship, for example
  // "entityTypes/ns.type1/entities/ns.entity1".
  string from_entity = 2;
  // The resource name of the end point of the relationship, for example
  // "entityTypes/ns.type2/entities/ns.entity2".
  string to_entity = 3;
  // The maximum number of results to return. Defaults to 1000, which is also the maximum value
  // of this field.
  int32 page_size = 4;
  // The page token to resume the results from, as returned from a previous request to this method
  // with the same query parameters.
  string page_token = 5;
}

// The response to list relationships. Returns all the requested relationships.
message ListRelationshipsResponse {
  // The resulting relationships. Do not include neither description nor properties.
  repeated Relationship relationships = 1;
  // The page token where the list continues. Can be sent to a subsequent query.
  string next_page_token = 2;
  // The total number of results, irrespective of paging.
  int32 total_size = 3;
}

// The request to get one relationship.
message GetRelationshipRequest {
  // The type of the relationship, for example "relationshipTypes/ns.type1".
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "relationshipTypeName"
      }
    }
  ];
  // The resource name of the start point of the relationship, for example
  // "entityTypes/ns.type1/entities/ns.entity1".
  string from_entity = 2 [(google.api.field_behavior) = REQUIRED];
  // The resource name of the end point of the relationship, for example
  // "entityTypes/ns.type2/entities/ns.entity2".
  string to_entity = 3 [(google.api.field_behavior) = REQUIRED];
}

// The request to create one relationship.
message CreateRelationshipRequest {
  // The relationship to create.
  Relationship relationship = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request to update one relationship.
message UpdateRelationshipRequest {
  // The relationship to update.
  Relationship relationship = 1 [(google.api.field_behavior) = REQUIRED];
  // The update mask to apply to the resource. Only the fields mentioned in this mask will be
  // modified. If "allow_missing" is set, this field is ignored.
  google.protobuf.FieldMask update_mask = 2;
  // If set to true, and the resource is not found, a new resource will be created.
  // If this is set, "update_mask" is ignored.
  bool allow_missing = 3;
}

// The request to delete one relationship.
message DeleteRelationshipRequest {
  // The parent of the relationship to delete, for example "relationshipTypes/ns.type1".
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "relationshipTypeName"
      }
    }
  ];
  // The resource name of the start point of the relationship, for example
  // "entityTypes/ns.type1/entities/ns.entity1".
  string from_entity = 2 [(google.api.field_behavior) = REQUIRED];
  // The resource name of the end point of the relationship, for example
  // "entityTypes/ns.type2/entities/ns.entity2".
  string to_entity = 3 [(google.api.field_behavior) = REQUIRED];
}
