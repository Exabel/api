// Copyright (c) 2019-2022 Exabel AS. All rights reserved.

syntax = "proto3";

package exabel.api.data.v1;

import "exabel/api/data/v1/time_series_messages.proto";
import "exabel/api/time/time_range.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";
import "protoc_gen_openapiv2/options/annotations.proto";

option go_package = "exabel.com/api/data/v1";
option java_multiple_files = true;
option java_outer_classname = "TimeSeriesServiceProto";
option java_package = "com.exabel.api.data.v1";

// Service for managing time series. See the User Guide for more information about time series:
// https://help.exabel.com/docs/time-series
service TimeSeriesService {
  // Lists time series.
  //
  // Lists all time series for one entity or for one signal. Only the names are returned.
  rpc ListTimeSeries(ListTimeSeriesRequest) returns (ListTimeSeriesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=entityTypes/*/entities/*}/timeSeries"
      additional_bindings: {get: "/v1/{parent=signals/*}/timeSeries"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "List time series"};
  }
  // Gets one time series.
  //
  // Use this method to get time series data points.
  //
  // *Note*: Exabel only supports processing time series with daily or lower resolution. Timestamps
  // must be RFC 3339 timestamps, normalised to **midnight UTC**, e.g. `2020-01-01T00:00:00Z`.
  rpc GetTimeSeries(GetTimeSeriesRequest) returns (TimeSeries) {
    option (google.api.http) = {
      get: "/v1/{name=entityTypes/*/entities/*/signals/*}"
      additional_bindings: {get: "/v1/{name=signals/*/entityTypes/*/entities/*}"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Get time series"};
  }
  // Creates one time series.
  //
  // *Note*: Exabel only supports processing time series with daily or lower resolution. Timestamps
  // must be RFC 3339 timestamps, normalised to **midnight UTC**, e.g. `2020-01-01T00:00:00Z`.
  //
  // The default `known_time` for a data point is insertion time, i.e. same as setting
  // `current_time` to `true`. To override the default behaviour, set one of the
  // `default_known_time` fields.
  //
  // The optional `view` argument lets you request for time series data points to be returned
  // within a date range. If this is not set, no values are returned.
  //
  // It is also possible to create a time series by calling `UpdateTimeSeries`
  // with `allow_missing` set to `true`.
  rpc CreateTimeSeries(CreateTimeSeriesRequest) returns (TimeSeries) {
    option (google.api.http) = {
      post: "/v1/{time_series.name=entityTypes/*/entities/*/signals/*}"
      body: "time_series"
      additional_bindings: {
        post: "/v1/{time_series.name=signals/*/entityTypes/*/entities/*}"
        body: "time_series"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Create time series"};
  }
  // Updates one time series.
  //
  // This can also be used to create a time series by setting `allow_missing` to `true`.
  //
  // Updating a time series will usually create a new version of the time series. However, by
  // explicitly setting a known time, any version may be changed or updated. If a value already
  // exists with exactly the same timestamp *and* known time, it will be updated. Otherwise a new
  // point will be created.
  //
  // If a timestamp that is previously known is not included, its value is *not* deleted, even
  // though it is within the range of this update. The old value will simply continue to exist at
  // the new version. Data points without values are cleared from this version, meaning that the
  // old value will continue to exist up until the new version, then cease to exist.
  //
  // Time series storage is optimized by discarding values which haven't changed from the previous
  // versions. Note that this optimization may cause surprising behavior when updating older
  // versions. When older versions are updated, it is therefore recommended to perform a full
  // backload from this version on.
  //
  // The default `known_time` for a data point is insertion time, i.e. same as setting
  // `current_time` to `true`. To override the default behaviour, set one of the
  // `default_known_time` fields.
  //
  // *Note*: Exabel only supports processing time series with daily or lower resolution. Timestamps
  // must be RFC 3339 timestamps, normalised to **midnight UTC**, e.g. `2020-01-01T00:00:00Z`.
  //
  // The optional `view` argument lets you request for time series data points to be returned
  // within a date range. If this is not set, no values are returned.
  rpc UpdateTimeSeries(UpdateTimeSeriesRequest) returns (TimeSeries) {
    option (google.api.http) = {
      patch: "/v1/{time_series.name=entityTypes/*/entities/*/signals/*}"
      body: "time_series"
      additional_bindings: {
        patch: "/v1/{time_series.name=signals/*/entityTypes/*/entities/*}"
        body: "time_series"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Update time series"};
  }
  // Creates or update multiple time series.
  //
  // Import multiple time series in bulk, by creating new time series or updating existing time
  // series.
  //
  // If you would like to import multiple time series belonging to different signals, specify `-`
  // as the `signalId` path parameter. (Signal IDs are part of each time series' resource name,
  // so your time series will still be assigned to their corresponding signals.)
  //
  // The default `known_time` for a data point is insertion time, i.e. same as setting
  // `current_time` to `true`. To override the default behaviour, set one of the
  // `default_known_time` fields.
  //
  // *Note*: Exabel only supports processing time series with daily or lower resolution. Timestamps
  // must be RFC 3339 timestamps, normalised to **midnight UTC**, e.g. `2020-01-01T00:00:00Z`.
  rpc ImportTimeSeries(ImportTimeSeriesRequest) returns (ImportTimeSeriesResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=entityTypes/*/entities/*}/timeSeries:import"
      body: "*"
      additional_bindings: {
        post: "/v1/{parent=signals/*}/timeSeries:import"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Import time series"};
  }
  // Deletes one time series.
  //
  // This will delete the time series and ***all*** its data points.
  //
  // If you have a "coverage" tag from the Create, Update or Import time series endpoints (by
  // setting `create_tag` to `true`), this will remove this entity from that tag.
  rpc DeleteTimeSeries(DeleteTimeSeriesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=entityTypes/*/entities/*/signals/*}"
      additional_bindings: {delete: "/v1/{name=signals/*/entityTypes/*/entities/*}"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Delete time series"};
  }
  // Deletes part(s) of one time series.
  //
  // Delete data points within a time series by specifying time ranges. This does not delete the
  // time series.
  rpc BatchDeleteTimeSeriesPoints(BatchDeleteTimeSeriesPointsRequest) returns (google.protobuf.Empty) {
    option (google.api.method_visibility).restriction = "INTERNAL";
    option (google.api.http) = {
      post: "/v1/{name=entityTypes/*/entities/*/signals/*}/points:batchDelete"
      body: "*"
      additional_bindings: {
        post: "/v1/{name=signals/*/entityTypes/*/entities/*}/points:batchDelete"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {summary: "Delete time series data points"};
  }
}

// The request to list time series. This request has an implicit empty `TimeSeriesView` parameter,
// so only the canonical names are returned.
message ListTimeSeriesRequest {
  // The parent entity or signal of time series to list, for example `entityTypes/ns.type1/entities/ns.entity1`
  // or `signal/ns.signal1`.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "timeSeriesParent"}
    }
  ];
  // Maximum number of results to return. Defaults to 1000, which is the maximum allowed value.
  int32 page_size = 2;
  // Token for a specific page of results, as returned from a previous list request with the same
  // query parameters.
  string page_token = 3;
}

// The response to list time series. Returns all matching time series.
message ListTimeSeriesResponse {
  // List of time series. Only the resource `name` field is returned.
  repeated TimeSeries time_series = 1;
  // Token for the next page of results, which can be sent to a subsequent query.
  // The end of the list is reached when the number of results is less than the page size
  // (NOT when the token is empty).
  string next_page_token = 2;
  // Total number of results, irrespective of paging.
  int32 total_size = 3;
}

// The request to get one time series. The returned time series will contain its canonical name.
// Not all time series are capable of returning data.
message GetTimeSeriesRequest {
  // The resource name of the requested time series, for example
  // `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1`
  // or `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`. The returned time series will
  // always contain its canonical name `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "timeSeriesName"}
    }
  ];
  // Specifies which parts of the time series should be returned in the request.
  TimeSeriesView view = 2;
}

// The request to create one time series. The parents of the time series will be inferred from
// `time_series.name`. The returned time series will contain its canonical name.
message CreateTimeSeriesRequest {
  // The time series to create.
  TimeSeries time_series = 1 [(google.api.field_behavior) = REQUIRED];
  // Specifies which parts of the time series should be returned in the request.
  TimeSeriesView view = 2;
  // The specification of the default known time to use for points that don't explicitly have a
  // known time set. If not set, the time of insertion is used as the default known time
  // (`current_time = true`).
  DefaultKnownTime default_known_time = 3;
  // Set to `true` to create a "coverage" tag containing all entities that have time series, for
  // this signal and entity type. If this tag already exists, setting `create_tag` to `true` will
  // update it with all entities that have time series.
  bool create_tag = 4;
}

// The request to update one time series. The returned time series will contain its canonical name.
message UpdateTimeSeriesRequest {
  // The time series to update. The data in this request and the existing data are merged together:
  // All points in the request will overwrite the existing points with the same key, unless
  // the new value is empty, in which case the point will be deleted.
  TimeSeries time_series = 1 [(google.api.field_behavior) = REQUIRED];
  // Specifies which parts of the time series should be returned in the request.
  TimeSeriesView view = 2;
  // The specification of the default known time to use for points that don't explicitly have a
  // known time set. If not set, the time of insertion is used as the default known time
  // (`current_time = true`).
  DefaultKnownTime default_known_time = 3;
  // If set to `true`, a new time series will be created if it did not exist.
  bool allow_missing = 4;
  // Set to `true` to create a "coverage" tag containing all entities that have time series, for
  // this signal and entity type. If this tag already exists, setting `create_tag` to `true` will
  // update it with all entities that have time series.
  // This flag is only relevant if `allow_missing` is set to `true`.
  bool create_tag = 5;
}

// The request to import multiple time series. The parents of the time series will be inferred from
// `time_series.name`.
message ImportTimeSeriesRequest {
  // The common parent of all time series to import. May include `-` as a wild card.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
  // One or more time series to import.
  repeated TimeSeries time_series = 2;
  // The specification of the default known time to use for points that don't explicitly have a
  // known time set. If not set, the time of insertion is used as the default known time
  // (`current_time = true`).
  DefaultKnownTime default_known_time = 3;
  // If set to `true`, new time series will be created if they did not exist.
  bool allow_missing = 4;
  // Set to `true` to create a "coverage" tag containing all entities that have time series, for
  // this signal and entity type. If this tag already exists, setting `create_tag` to `true` will
  // update it with all entities that have time series.
  // This flag is only relevant if `allow_missing` is set to `true`.
  bool create_tag = 5;
  // Set to `true` to report the status of each time series in the response. If `false`, a failure
  // for one time series will fail the entire request, and a sample of the failures will be
  // reported in the trailers.
  bool status_in_response = 6;
}

// The response to import multiple time series.
message ImportTimeSeriesResponse {
  // One response for each time series, in order. This list is populated if and only if
  // `status_in_response` was set to `true` in the request.
  repeated SingleTimeSeriesResponse responses = 1;
  // The status for one time series.
  message SingleTimeSeriesResponse {
    // The resource name of the time series, for example
    // `entityTypes/store/entities/ns.apple_store_fifth_avenue/signals/ns.visitors`.
    string time_series_name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: "\"entityTypes/store/entities/ns.apple_store_fifth_avenue/signals/ns.visitors\""}];
    // The status for this time series. A `status.code = OK` indicates that the time series
    // was imported successfully.
    google.rpc.Status status = 2;
  }
}

// The request to delete one time series.
message DeleteTimeSeriesRequest {
  // The resource name of the time series to be deleted, for example
  // `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1` or
  // `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "timeSeriesName"}
    }
  ];
}

// The request to delete parts of one time series.
message BatchDeleteTimeSeriesPointsRequest {
  // The resource name of the time series to be deleted, for example
  // `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1` or
  // `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "timeSeriesName"}
    }
  ];
  // The list of time ranges to delete from the time series. Each time range may
  // be expanded to whole hours (UTC time).
  repeated api.time.TimeRange time_ranges = 2;
}
