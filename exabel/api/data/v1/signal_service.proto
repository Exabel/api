// Copyright (c) 2019-2021 Exabel AS. All rights reserved.

syntax = "proto3";

package exabel.api.data.v1;

option java_multiple_files = true;
option java_outer_classname = "SignalServiceProto";
option java_package = "com.exabel.api.data.v1";

import "exabel/api/data/v1/signal_messages.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

// Manages signals in the Data API.
service SignalService {
  // Lists all known signals.
  rpc ListSignals(ListSignalsRequest) returns (ListSignalsResponse) {
    option (google.api.http) = {
      get: "/v1/signals"
    };
  }
  // Gets one signal.
  rpc GetSignal(GetSignalRequest) returns (Signal) {
    option (google.api.http) = {
      get: "/v1/{name=signals/*}"
    };
  }
  // Creates one signal and returns it.
  rpc CreateSignal(CreateSignalRequest) returns (Signal) {
    option (google.api.http) = {
      post: "/v1/signals"
      body: "signal"
    };
  }
  // Updates one signal and returns it.
  rpc UpdateSignal(UpdateSignalRequest) returns (Signal) {
    option (google.api.http) = {
      patch: "/v1/{signal.name=signals/*}"
      body: "signal"
    };
  }
  // Deletes one signal. ALL time series for this signal will also be deleted.
  rpc DeleteSignal(DeleteSignalRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=signals/*}"
    };
  }
}

// The request to list signals.
message ListSignalsRequest {
  // The maximum number of results to return. Defaults to 1000, which is also the maximum value
  // of this field.
  int32 page_size = 1;
  // The page token to resume the results from, as returned from a previous request to this method
  // with the same query parameters.
  string page_token = 2;
}

// The response to list signals. Returns all known signals.
message ListSignalsResponse {
  // The resulting signals.
  repeated Signal signals = 1;
  // The page token where the list continues. Can be sent to a subsequent query.
  string next_page_token = 2;
  // The total number of results, irrespective of paging.
  int32 total_size = 3;
}

// The request to get one signal.
message GetSignalRequest {
  // The resource name of the requested signal, for example "signals/ns.signal1".
  string name = 1;
}

// The request to create one signal.
message CreateSignalRequest {
  // The signal to create.
  Signal signal = 1;
  // By default a library signal is created along with the signal.
  // This flag can be used to avoid creating a library signal.
  bool no_library_signal = 2;
}

// The request to update one signal.
message UpdateSignalRequest {
  // The signal to update.
  Signal signal = 1;
  // The update mask to apply to the resource. Only the fields mentioned in this mask will be
  // modified.
  google.protobuf.FieldMask update_mask = 2;
}

// The request to delete one signal.
message DeleteSignalRequest {
  // The resource name of the signal to delete, for example "signals/ns.signal1".
  string name = 1;
}
